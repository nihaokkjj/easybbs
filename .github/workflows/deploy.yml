name: Deploy to GitHub Pages

permissions:
  contents: read
  pages: write # 允许写入 Pages 内容
  id-token: write

on:
  push:
    branches: [main] # 监听 main 分支的推送，触发部署

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # 使用 Ubuntu 环境

# 💥 增加环境配置，这是 Pages 部署的最佳实践
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      # Step 1: 检出代码
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 3: 安装 pnpm
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      # Step 2: 设置 Node.js 环境
      - name: Setup Node.js Environment
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      # Step 4: 验证 pnpm 安装
      - name: Verify pnpm Installation
        run: pnpm --version

      # Step 5: 安装依赖
      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      # Step 6: 构建项目（生成静态文件到 dist 目录）
      - name: Build Project
        run: pnpm run build # 确保 package.json 中 build 脚本正确生成 dist

# Step 7: 创建 CNAME 文件以配置自定义域名 (新增步骤)
      - name: Create CNAME file for custom domain
        run: echo "kkksj.cn/easybbs" > ./dist/CNAME
        # 🚨 重点：请将 "your-subdomain.example.com" 替换为您实际的二级域名，例如 "app.mydomain.com"


      # Step 7: 配置 GitHub Pages 环境
      - name: Configure GitHub Pages
        uses: actions/configure-pages@v5 # 官方配置 Pages 的 Action

      # Step 8: 上传构建产物（dist 目录）作为部署 artifact
      - name: Upload Build Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist' # 指向项目构建后的输出目录（通常是 dist）

      # Step 9: 部署到 GitHub Pages
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4 # 官方部署 Pages 的 Action
        with:
          artifact_name: github-pages # 与上一步上传的 artifact 名称对应
